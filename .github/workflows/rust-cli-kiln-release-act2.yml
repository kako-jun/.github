name: Release Act 2 - Language Wrappers

on:
  workflow_run:
    workflows: ["Release Act 1 - Core"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish wrappers for'
        required: true
        type: string
  workflow_call:
    inputs:
      project-name:
        description: 'Project name (e.g., diffx, lawkit, diffai)'
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: ${{ inputs.project-name || github.event.repository.name }}

jobs:
  get-tag:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      tag-name: ${{ steps.get-tag.outputs.tag }}
    steps:
    - name: Get tag name
      id: get-tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.tag }}"
        else
          # Get tag from the triggering workflow
          TAG_NAME=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name')
        fi
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wait-for-release:
    needs: get-tag
    runs-on: ubuntu-latest
    outputs:
      release-ready: ${{ steps.check.outputs.ready }}
    steps:
    - name: Wait for release creation
      id: check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ needs.get-tag.outputs.tag-name }}"
        echo "Waiting for release $TAG_NAME to be fully created..."
        
        # Wait for release and all assets to be available
        for i in {1..30}; do
          echo "Attempt $i/30: Checking release assets..."
          
          # Check if release exists and has all expected assets
          ASSETS=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.assets | length' 2>/dev/null || echo "0")
          
          if [ "$ASSETS" -ge 5 ]; then
            echo "Release $TAG_NAME is ready with $ASSETS assets"
            echo "ready=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Release not ready yet (found $ASSETS assets, need 5+), waiting 30s..."
          sleep 30
        done
        
        echo "Timeout waiting for release creation"
        exit 1

  publish-packages:
    needs: [get-tag, wait-for-release]
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout project repository
      uses: actions/checkout@v4
      
    - name: Checkout shared repository
      uses: actions/checkout@v4
      with:
        repository: kako-jun/.github
        path: github-shared
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto
        working-directory: ${{ env.PROJECT_NAME }}-python
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.target }}
        path: ${{ env.PROJECT_NAME }}-python/dist
    
    - name: Publish to PyPI
      if: github.event_name != 'pull_request'
      working-directory: ${{ env.PROJECT_NAME }}-python
      env:
        MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        pip install maturin
        maturin upload --skip-existing dist/*

  publish-npm:
    needs: [get-tag, publish-packages, wait-for-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout project repository
      uses: actions/checkout@v4
      
    - name: Checkout shared repository
      uses: actions/checkout@v4
      with:
        repository: kako-jun/.github
        path: github-shared
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Run pre-release tests for npm
      run: |
        chmod +x ./github-shared/rust-cli-kiln/scripts/testing/05-pre-release-test-act2.sh
        ./github-shared/rust-cli-kiln/scripts/testing/05-pre-release-test-act2.sh
    
    - name: Download all platform binaries for npm package
      working-directory: ${{ env.PROJECT_NAME }}-npm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ needs.get-tag.outputs.tag-name }}"
        node scripts/download-all-binaries.js
    
    - name: Publish to npm
      working-directory: ${{ env.PROJECT_NAME }}-npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish