name: Rust CLI Kiln - Release Build and Publish

on:
  workflow_call:
    inputs:
      project-name:
        description: 'Project name (diffx, diffai, or lawkit)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build-only:
    strategy:
      matrix:
        include:
          # Linux x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x64
            
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: arm64
            
          # macOS Intel
          - os: macos-13
            target: x86_64-apple-darwin
            arch: x64
            
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            
          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ format('kako-jun/{0}', inputs.project-name) }}
        ref: ${{ github.ref }}
        
      
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: ${{ matrix.target }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      
    - name: Add uv to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
          !target/wheels/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Setup Python environment for maturin
      run: |
        # Install uv and Python dependencies required for Python package building
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Checkout .github repository
      uses: actions/checkout@v4
      with:
        repository: kako-jun/.github
        path: .github
        
    - name: Build Python wheel with manylinux
      uses: messense/maturin-action@v1
      if: matrix.os == 'ubuntu-latest'
      with:
        working-directory: ./${{ inputs.project-name }}-python
        target: ${{ matrix.target }}
        manylinux: auto
        args: --release --out ../target/wheels
        
    - name: Setup environment and run build-test-publish sequence
      shell: bash
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        # Setup environment variables for workflow type
        export WORKFLOW_CALL_PROJECT="${{ inputs.project-name }}"
        
        # Create symlink and verify it works
        if [ -f ./scripts/utils/create-github-shared-symlink.sh ]; then
          ./scripts/utils/create-github-shared-symlink.sh
        else
          echo "Warning: create-github-shared-symlink.sh not found, creating symlink manually"
          ln -s .github github-shared
        fi
        
        # Debug: show current directory structure
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Source common.sh from the symlinked .github
        if [ -f github-shared/rust-cli-kiln/scripts/utils/common.sh ]; then
          source github-shared/rust-cli-kiln/scripts/utils/common.sh
        else
          echo "Error: common.sh not found at expected path"
          exit 1
        fi
        
        # Setup unified environment
        setup_github_actions_env || exit 1
        
        # Setup Python virtual environment for maturin
        # Ensure uv is in PATH first
        export PATH="$HOME/.cargo/bin:$PATH"
        
        # Check if uv is available
        if ! command -v uv &> /dev/null; then
          echo "Error: uv not found in PATH"
          echo "PATH: $PATH"
          exit 1
        fi
        
        # Create and activate virtual environment
        if [ ! -d ".venv" ]; then
          echo "Creating virtual environment..."
          uv venv || exit 1
        fi
        
        # Activate virtual environment based on OS
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          source .venv/Scripts/activate || exit 1
        else
          source .venv/bin/activate || exit 1
        fi
        
        # Install Python dependencies
        echo "Installing Python dependencies..."
        uv pip install maturin wheel build twine || exit 1
        
        echo "Step 1: Running comprehensive build and test (6OS parallel build)..."
        export CARGO_BUILD_TARGET=${{ matrix.target }}
        
        # Skip Python package build for non-Ubuntu platforms
        # Python wheels are built by maturin-action for Ubuntu only
        if [[ "${{ matrix.os }}" != "ubuntu-latest" ]]; then
          export SKIP_PYTHON_WHEEL_BUILD=1
        fi
        
        github-shared/rust-cli-kiln/scripts/release/05-build-and-test.sh
        
    - name: Upload Rust binary artifacts
      if: always()  
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project-name }}-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/${{ inputs.project-name }}*
          target/release/${{ inputs.project-name }}*
        if-no-files-found: ignore
        
    - name: Upload Python wheel artifacts
      if: always() && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project-name }}-python-wheels-${{ matrix.arch }}
        path: target/wheels/*.whl
        if-no-files-found: ignore
        
    - name: Upload Node.js package artifacts
      if: always() && matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project-name }}-npm-package
        path: ${{ inputs.project-name }}-node/*.tgz
        if-no-files-found: ignore
  
  publish-and-release:
    needs: build-only
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ format('kako-jun/{0}', inputs.project-name) }}
        ref: ${{ github.ref }}
        
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      
    - name: Add uv to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Checkout .github repository
      uses: actions/checkout@v4
      with:
        repository: kako-jun/.github
        path: .github
        
    - name: Setup environment and run atomic publishing
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        # Setup environment variables for workflow type
        export WORKFLOW_CALL_PROJECT="${{ inputs.project-name }}"
        
        # Create symlink and verify it works
        ./scripts/utils/create-github-shared-symlink.sh
        
        # Source common.sh from the symlinked .github
        source github-shared/rust-cli-kiln/scripts/utils/common.sh
        
        # Setup unified environment
        setup_github_actions_env
        
        # Setup Python virtual environment for twine
        source .venv/bin/activate 2>/dev/null || { uv venv && source .venv/bin/activate; }
        uv pip install twine
        
        echo "Step 1: Atomic publishing from artifacts..."
        github-shared/rust-cli-kiln/scripts/release/08-publish-all-packages.sh
        
        echo "Step 2: Testing published packages..."
        github-shared/rust-cli-kiln/scripts/release/09-test-published-packages.sh
        
        echo "Step 3: Creating GitHub release page..."
        github-shared/rust-cli-kiln/scripts/release/10-create-github-release.sh